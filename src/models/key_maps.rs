use super::layout::{QwertyEnUs, QwertzDeDe};

pub trait GetKeyMap {
    fn get_key_map(c: char) -> Option<(usize, bool)>;
}

// map dictionary (key, shift)
impl GetKeyMap for QwertyEnUs {
    fn get_key_map(c: char) -> Option<(usize, bool)> {
        get_key_qwerty(c)
    }
}

impl GetKeyMap for QwertzDeDe {
    fn get_key_map(c: char) -> Option<(usize, bool)> {
        get_key_qwertz(c)
    }
}

fn get_key_qwerty(c: char) -> Option<(usize, bool)> {
    let key = match c {
        'a' => (1, false),
        'A' => (1, true),
        'b' => (2, false),
        'B' => (2, true),
        'c' => (3, false),
        'C' => (3, true),
        'd' => (4, false),
        'D' => (4, true),
        'e' => (5, false),
        'E' => (5, true),
        'f' => (6, false),
        'F' => (6, true),
        'g' => (7, false),
        'G' => (7, true),
        'h' => (8, false),
        'H' => (8, true),
        'i' => (9, false),
        'I' => (9, true),
        'j' => (10, false),
        'J' => (10, true),
        'k' => (11, false),
        'K' => (11, true),
        'l' => (12, false),
        'L' => (12, true),
        'm' => (13, false),
        'M' => (13, true),
        'n' => (14, false),
        'N' => (14, true),
        'o' => (15, false),
        'O' => (15, true),
        'p' => (16, false),
        'P' => (16, true),
        'q' => (17, false),
        'Q' => (17, true),
        'r' => (18, false),
        'R' => (18, true),
        's' => (19, false),
        'S' => (19, true),
        't' => (20, false),
        'T' => (20, true),
        'u' => (21, false),
        'U' => (21, true),
        'v' => (22, false),
        'V' => (22, true),
        'w' => (23, false),
        'W' => (23, true),
        'x' => (24, false),
        'X' => (24, true),
        'y' => (25, false),
        'Y' => (25, true),
        'z' => (26, false),
        'Z' => (26, true),
        '0' => (27, false),
        ')' => (27, true),
        '1' => (28, false),
        '!' => (28, true),
        '2' => (29, false),
        '@' => (29, true),
        '3' => (30, false),
        '#' => (30, true),
        '4' => (31, false),
        '$' => (31, true),
        '5' => (32, false),
        '%' => (32, true),
        '6' => (33, false),
        '^' => (33, true),
        '7' => (34, false),
        '&' => (34, true),
        '8' => (35, false),
        '*' => (35, true),
        '9' => (36, false),
        '(' => (36, true),
        '`' => (37, false),
        '~' => (37, true),
        '-' => (38, false),
        '_' => (38, true),
        '=' => (39, false),
        '+' => (39, true),
        '[' => (40, false),
        '{' => (40, true),
        ']' => (41, false),
        '}' => (41, true),
        ';' => (42, false),
        ':' => (42, true),
        '\'' => (43, false),
        '"' => (43, true),
        ',' => (44, false),
        '<' => (44, true),
        '.' => (45, false),
        '>' => (45, true),
        '/' => (46, false),
        '?' => (46, true),
        _ => (0, false),
    };

    match key.0 {
        0 => None,
        _ => Some(key),
    }
}

fn get_key_qwertz(c: char) -> Option<(usize, bool)> {
    let key = match c {
        'a' => (1, false),
        'A' => (1, true),
        'b' => (2, false),
        'B' => (2, true),
        'c' => (3, false),
        'C' => (3, true),
        'd' => (4, false),
        'D' => (4, true),
        'e' => (5, false),
        'E' => (5, true),
        'f' => (6, false),
        'F' => (6, true),
        'g' => (7, false),
        'G' => (7, true),
        'h' => (8, false),
        'H' => (8, true),
        'i' => (9, false),
        'I' => (9, true),
        'j' => (10, false),
        'J' => (10, true),
        'k' => (11, false),
        'K' => (11, true),
        'l' => (12, false),
        'L' => (12, true),
        'm' => (13, false),
        'M' => (13, true),
        'n' => (14, false),
        'N' => (14, true),
        'o' => (15, false),
        'O' => (15, true),
        'p' => (16, false),
        'P' => (16, true),
        'q' => (17, false),
        'Q' => (17, true),
        'r' => (18, false),
        'R' => (18, true),
        's' => (19, false),
        'S' => (19, true),
        't' => (20, false),
        'T' => (20, true),
        'u' => (21, false),
        'U' => (21, true),
        'v' => (22, false),
        'V' => (22, true),
        'w' => (23, false),
        'W' => (23, true),
        'x' => (24, false),
        'X' => (24, true),
        'y' => (25, false),
        'Y' => (25, true),
        'z' => (26, false),
        'Z' => (26, true),
        '0' => (27, false),
        '=' => (27, true),
        '1' => (28, false),
        '!' => (28, true),
        '2' => (29, false),
        '"' => (29, true),
        '3' => (30, false),
        '§' => (30, true),
        '4' => (31, false),
        '$' => (31, true),
        '5' => (32, false),
        '%' => (32, true),
        '6' => (33, false),
        '&' => (33, true),
        '7' => (34, false),
        '/' => (34, true),
        '8' => (35, false),
        '(' => (35, true),
        '9' => (36, false),
        ')' => (36, true),
        '^' => (37, false),
        '°' => (37, true),
        'ß' => (38, false),
        '?' => (38, true),
        '´' => (39, false),
        '`' => (39, true),
        'ü' => (40, false),
        'Ü' => (40, true),
        'ö' => (41, false),
        'Ö' => (41, true),
        'ä' => (42, false),
        'Ä' => (42, true),
        '+' => (43, false),
        '*' => (43, true),
        '#' => (44, false),
        '\'' => (44, true),
        '<' => (45, false),
        '>' => (45, true),
        ',' => (46, false),
        ';' => (46, true),
        '.' => (47, false),
        ':' => (47, true),
        '-' => (48, false),
        '_' => (48, true),
        _ => (0, false),
    };

    match key.0 {
        0 => None,
        _ => Some(key),
    }
}
